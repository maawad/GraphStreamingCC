name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  full-build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    #    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: InstalledDependencyCache
        with:
          path: ${{runner.workspace}}/install
          key: InstalledDependencyCache

      - name: Install xxHash
        if: steps.InstalledDependencyCache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{runner.workspace}}
        run: |
          git clone -b v0.8.0 https://github.com/Cyan4973/xxHash.git
          cd xxHash
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install ../cmake_unofficial
          cmake --build . --target install

      - name: Install GTest
        if: steps.InstalledDependencyCache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{runner.workspace}}
        run: |
          git clone -b release-1.10.0 https://github.com/google/googletest.git
          cd googletest
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install ..
          cmake --build . --target install

      - uses: actions/cache@v2
        id: BoostCache
        with:
          path: ${{runner.workspace}}/boost
          key: BoostCache

      - name: Install Boost
        if: steps.BoostCache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{runner.workspace}}
        run: |
          git clone --recursive -b boost-1.66.0 "https://github.com/boostorg/boost.git"
          cd boost
          ./bootstrap.sh
          ./b2 headers

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        env:
          BOOST_ROOT: ${{runner.workspace}}/boost
        run: cmake -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/install -DCMAKE_INSTALL_INCLUDEDIR=${{runner.workspace}}/install/include -DCMAKE_BUILD_TYPE=$BUILD_TYPE $GITHUB_WORKSPACE

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Unit Testing
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: |
          mkdir GUTTREEDATA
          ./tests
